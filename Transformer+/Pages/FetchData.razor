@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Transformer_.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
    AllowGrouping="true" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    Data="@forecasts" TItem="WeatherForecast" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
    IsLoading=@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date" Width="160px" />
        <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="TemperatureC" Width="160px" />
        <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="TemperatureF" Width="160px" />
        <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" Width="160px" />
    </Columns>
</RadzenDataGrid>

@code {

    private IEnumerable<WeatherForecast> forecasts;

    private bool isLoading => forecasts == null;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
