@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using Transformer_.Data.NASA
@inject NASAService NASAService

<h1>Last 100 Exoplanets Discovered.</h1>

<p>This component demonstrates fetching data from an api.</p>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
    AllowGrouping="true" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
    Data="@exoplanets" TItem="Exoplanet" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true"
    IsLoading=@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="Exoplanet" Property="pl_name" Title="Name" Frozen="true"/>
        <RadzenDataGridColumn TItem="Exoplanet" Property="disc_year" Title="Year" />
        <RadzenDataGridColumn TItem="Exoplanet" Property="discoverymethod" Title="Method" />
        <RadzenDataGridColumn TItem="Exoplanet" Property="hostname" Title="Host Star" />
        <RadzenDataGridColumn TItem="Exoplanet" Property="disc_facility" Title="Facility" />
        <RadzenDataGridColumn TItem="Exoplanet" Property="disc_instrument" Title="Instrument" />
        <RadzenDataGridColumn TItem="Exoplanet" Title="Reference">
            <Template Context="exoplanet">
                @((MarkupString)exoplanet.pl_orbper_reflink)
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    private IEnumerable<Exoplanet> exoplanets;

    private bool isLoading => exoplanets == null;

    protected override async Task OnInitializedAsync()
    {
        exoplanets = await NASAService.GetExoplanetsAsync();
    }
}
