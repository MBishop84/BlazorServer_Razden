@page "/"
@using Transformer_.Data.Animations;

<PageTitle>Home</PageTitle>

<RadzenStack AlignItems="AlignItems.Center">
    <Animation>
        <img src="images/stoic-strategist.png" style="height: 300px" alt="stoic"/>
    </Animation>
    <RadzenText TextStyle="TextStyle.Subtitle1">@quote</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle2">@author</RadzenText>
    </RadzenStack>
    <hr />
    @if (flyBy)
{
        <Animation AnimationName=@AnimationName.zoomIn AnimationDuration="2000" AnimationDelay="0">
            <img src="/images/Autobots.png" alt="Autobots" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"/>
        </Animation>
}
<RadzenCard Variant="Variant.Filled" Class="rz-mx-auto" Style="width: 50%">
    <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">Button Playground</RadzenText>
    <hr />
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceEvenly">
        <RadzenButton Variant="Variant.Outlined" Shade="Shade.Darker" Click="@OnInitializedAsync" Text="Refresh Quote" ButtonStyle="ButtonStyle.Success"/>
        <RadzenButton Variant="Variant.Outlined" Shade="Shade.Lighter" Click="@Fly" Text="The Watcher" ButtonStyle="ButtonStyle.Primary" Disabled="@flyBy"/>
    </RadzenStack>
</RadzenCard>

@code {
    private Content? content;
    private string quote = "Seeking Wisdom...";
    private string author = "...";
    private bool flyBy { get; set; }

    private class Content
    {
        public string? id { get; set; }
        public string? text { get; set; }
        public Author? author { get; set; }
    }

    private class Author
    {
        public string? id { get; set; }
        public string? name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        content = await GetContent();
        if (content != null)
        {
            quote = content.text;
            author = content.author.name;
        }
    }

    private async Task<Content?> GetContent()
    {
        try
        {
            using var client = new HttpClient();
            return await client.GetFromJsonAsync<Content>("https://api.fisenko.net/v1/quotes/en/random");
        }
        catch (Exception ex)
        {
            quote = "Sorry, No wisdom is forthcoming.";
            author = ex.Message;
        }
        return null;
    }

    private async Task Fly()
    {
        flyBy = true;
        await Task.Delay(3000);
        flyBy = false;
    }
}
